// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netsec-ethz/fpki/pkg/db (interfaces: Conn)
//
// Generated by this command:
//
//	mockgen -destination ./mock_db/conn.go . Conn
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	common "github.com/netsec-ethz/fpki/pkg/common"
	db "github.com/netsec-ethz/fpki/pkg/db"
	gomock "go.uber.org/mock/gomock"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// CheckCertsExist mocks base method.
func (m *MockConn) CheckCertsExist(arg0 context.Context, arg1 []*common.SHA256Output) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCertsExist", arg0, arg1)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCertsExist indicates an expected call of CheckCertsExist.
func (mr *MockConnMockRecorder) CheckCertsExist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCertsExist", reflect.TypeOf((*MockConn)(nil).CheckCertsExist), arg0, arg1)
}

// CheckPoliciesExist mocks base method.
func (m *MockConn) CheckPoliciesExist(arg0 context.Context, arg1 []*common.SHA256Output) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPoliciesExist", arg0, arg1)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPoliciesExist indicates an expected call of CheckPoliciesExist.
func (mr *MockConnMockRecorder) CheckPoliciesExist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPoliciesExist", reflect.TypeOf((*MockConn)(nil).CheckPoliciesExist), arg0, arg1)
}

// CleanupDirty mocks base method.
func (m *MockConn) CleanupDirty(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupDirty", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupDirty indicates an expected call of CleanupDirty.
func (mr *MockConnMockRecorder) CleanupDirty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupDirty", reflect.TypeOf((*MockConn)(nil).CleanupDirty), arg0)
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// DB mocks base method.
func (m *MockConn) DB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockConnMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockConn)(nil).DB))
}

// DeleteTreeNodes mocks base method.
func (m *MockConn) DeleteTreeNodes(arg0 context.Context, arg1 []common.SHA256Output) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTreeNodes", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTreeNodes indicates an expected call of DeleteTreeNodes.
func (mr *MockConnMockRecorder) DeleteTreeNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTreeNodes", reflect.TypeOf((*MockConn)(nil).DeleteTreeNodes), arg0, arg1)
}

// DirtyCount mocks base method.
func (m *MockConn) DirtyCount(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirtyCount", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DirtyCount indicates an expected call of DirtyCount.
func (mr *MockConnMockRecorder) DirtyCount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirtyCount", reflect.TypeOf((*MockConn)(nil).DirtyCount), arg0)
}

// InsertDomainsIntoDirty mocks base method.
func (m *MockConn) InsertDomainsIntoDirty(arg0 context.Context, arg1 []*common.SHA256Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDomainsIntoDirty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDomainsIntoDirty indicates an expected call of InsertDomainsIntoDirty.
func (mr *MockConnMockRecorder) InsertDomainsIntoDirty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDomainsIntoDirty", reflect.TypeOf((*MockConn)(nil).InsertDomainsIntoDirty), arg0, arg1)
}

// LastCTlogServerState mocks base method.
func (m *MockConn) LastCTlogServerState(arg0 context.Context, arg1 string) (int64, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCTlogServerState", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCTlogServerState indicates an expected call of LastCTlogServerState.
func (mr *MockConnMockRecorder) LastCTlogServerState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCTlogServerState", reflect.TypeOf((*MockConn)(nil).LastCTlogServerState), arg0, arg1)
}

// LoadRoot mocks base method.
func (m *MockConn) LoadRoot(arg0 context.Context) (*common.SHA256Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRoot", arg0)
	ret0, _ := ret[0].(*common.SHA256Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadRoot indicates an expected call of LoadRoot.
func (mr *MockConnMockRecorder) LoadRoot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRoot", reflect.TypeOf((*MockConn)(nil).LoadRoot), arg0)
}

// PruneCerts mocks base method.
func (m *MockConn) PruneCerts(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneCerts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneCerts indicates an expected call of PruneCerts.
func (mr *MockConnMockRecorder) PruneCerts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneCerts", reflect.TypeOf((*MockConn)(nil).PruneCerts), arg0, arg1)
}

// RecomputeDirtyDomainsCertAndPolicyIDs mocks base method.
func (m *MockConn) RecomputeDirtyDomainsCertAndPolicyIDs(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecomputeDirtyDomainsCertAndPolicyIDs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecomputeDirtyDomainsCertAndPolicyIDs indicates an expected call of RecomputeDirtyDomainsCertAndPolicyIDs.
func (mr *MockConnMockRecorder) RecomputeDirtyDomainsCertAndPolicyIDs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecomputeDirtyDomainsCertAndPolicyIDs", reflect.TypeOf((*MockConn)(nil).RecomputeDirtyDomainsCertAndPolicyIDs), arg0)
}

// RetrieveCertificateOrPolicyPayloads mocks base method.
func (m *MockConn) RetrieveCertificateOrPolicyPayloads(arg0 context.Context, arg1 []*common.SHA256Output) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveCertificateOrPolicyPayloads", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCertificateOrPolicyPayloads indicates an expected call of RetrieveCertificateOrPolicyPayloads.
func (mr *MockConnMockRecorder) RetrieveCertificateOrPolicyPayloads(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCertificateOrPolicyPayloads", reflect.TypeOf((*MockConn)(nil).RetrieveCertificateOrPolicyPayloads), arg0, arg1)
}

// RetrieveCertificatePayloads mocks base method.
func (m *MockConn) RetrieveCertificatePayloads(arg0 context.Context, arg1 []*common.SHA256Output) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveCertificatePayloads", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveCertificatePayloads indicates an expected call of RetrieveCertificatePayloads.
func (mr *MockConnMockRecorder) RetrieveCertificatePayloads(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveCertificatePayloads", reflect.TypeOf((*MockConn)(nil).RetrieveCertificatePayloads), arg0, arg1)
}

// RetrieveDirtyDomains mocks base method.
func (m *MockConn) RetrieveDirtyDomains(arg0 context.Context) ([]*common.SHA256Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveDirtyDomains", arg0)
	ret0, _ := ret[0].([]*common.SHA256Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveDirtyDomains indicates an expected call of RetrieveDirtyDomains.
func (mr *MockConnMockRecorder) RetrieveDirtyDomains(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDirtyDomains", reflect.TypeOf((*MockConn)(nil).RetrieveDirtyDomains), arg0)
}

// RetrieveDomainCertificatesIDs mocks base method.
func (m *MockConn) RetrieveDomainCertificatesIDs(arg0 context.Context, arg1 common.SHA256Output) (*common.SHA256Output, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveDomainCertificatesIDs", arg0, arg1)
	ret0, _ := ret[0].(*common.SHA256Output)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveDomainCertificatesIDs indicates an expected call of RetrieveDomainCertificatesIDs.
func (mr *MockConnMockRecorder) RetrieveDomainCertificatesIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDomainCertificatesIDs", reflect.TypeOf((*MockConn)(nil).RetrieveDomainCertificatesIDs), arg0, arg1)
}

// RetrieveDomainEntries mocks base method.
func (m *MockConn) RetrieveDomainEntries(arg0 context.Context, arg1 []*common.SHA256Output) ([]*db.KeyValuePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveDomainEntries", arg0, arg1)
	ret0, _ := ret[0].([]*db.KeyValuePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveDomainEntries indicates an expected call of RetrieveDomainEntries.
func (mr *MockConnMockRecorder) RetrieveDomainEntries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDomainEntries", reflect.TypeOf((*MockConn)(nil).RetrieveDomainEntries), arg0, arg1)
}

// RetrieveDomainEntriesDirtyOnes mocks base method.
func (m *MockConn) RetrieveDomainEntriesDirtyOnes(arg0 context.Context, arg1, arg2 uint64) ([]*db.KeyValuePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveDomainEntriesDirtyOnes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*db.KeyValuePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveDomainEntriesDirtyOnes indicates an expected call of RetrieveDomainEntriesDirtyOnes.
func (mr *MockConnMockRecorder) RetrieveDomainEntriesDirtyOnes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDomainEntriesDirtyOnes", reflect.TypeOf((*MockConn)(nil).RetrieveDomainEntriesDirtyOnes), arg0, arg1, arg2)
}

// RetrieveDomainPoliciesIDs mocks base method.
func (m *MockConn) RetrieveDomainPoliciesIDs(arg0 context.Context, arg1 common.SHA256Output) (*common.SHA256Output, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveDomainPoliciesIDs", arg0, arg1)
	ret0, _ := ret[0].(*common.SHA256Output)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveDomainPoliciesIDs indicates an expected call of RetrieveDomainPoliciesIDs.
func (mr *MockConnMockRecorder) RetrieveDomainPoliciesIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDomainPoliciesIDs", reflect.TypeOf((*MockConn)(nil).RetrieveDomainPoliciesIDs), arg0, arg1)
}

// RetrievePolicyPayloads mocks base method.
func (m *MockConn) RetrievePolicyPayloads(arg0 context.Context, arg1 []*common.SHA256Output) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrievePolicyPayloads", arg0, arg1)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePolicyPayloads indicates an expected call of RetrievePolicyPayloads.
func (mr *MockConnMockRecorder) RetrievePolicyPayloads(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePolicyPayloads", reflect.TypeOf((*MockConn)(nil).RetrievePolicyPayloads), arg0, arg1)
}

// RetrieveTreeNode mocks base method.
func (m *MockConn) RetrieveTreeNode(arg0 context.Context, arg1 common.SHA256Output) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTreeNode", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveTreeNode indicates an expected call of RetrieveTreeNode.
func (mr *MockConnMockRecorder) RetrieveTreeNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTreeNode", reflect.TypeOf((*MockConn)(nil).RetrieveTreeNode), arg0, arg1)
}

// SaveRoot mocks base method.
func (m *MockConn) SaveRoot(arg0 context.Context, arg1 *common.SHA256Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRoot indicates an expected call of SaveRoot.
func (mr *MockConnMockRecorder) SaveRoot(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoot", reflect.TypeOf((*MockConn)(nil).SaveRoot), arg0, arg1)
}

// TruncateAllTables mocks base method.
func (m *MockConn) TruncateAllTables(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateAllTables", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateAllTables indicates an expected call of TruncateAllTables.
func (mr *MockConnMockRecorder) TruncateAllTables(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateAllTables", reflect.TypeOf((*MockConn)(nil).TruncateAllTables), arg0)
}

// UpdateCerts mocks base method.
func (m *MockConn) UpdateCerts(arg0 context.Context, arg1, arg2 []*common.SHA256Output, arg3 []*time.Time, arg4 [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCerts", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCerts indicates an expected call of UpdateCerts.
func (mr *MockConnMockRecorder) UpdateCerts(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCerts", reflect.TypeOf((*MockConn)(nil).UpdateCerts), arg0, arg1, arg2, arg3, arg4)
}

// UpdateDomainCerts mocks base method.
func (m *MockConn) UpdateDomainCerts(arg0 context.Context, arg1, arg2 []*common.SHA256Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainCerts", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDomainCerts indicates an expected call of UpdateDomainCerts.
func (mr *MockConnMockRecorder) UpdateDomainCerts(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainCerts", reflect.TypeOf((*MockConn)(nil).UpdateDomainCerts), arg0, arg1, arg2)
}

// UpdateDomainPolicies mocks base method.
func (m *MockConn) UpdateDomainPolicies(arg0 context.Context, arg1, arg2 []*common.SHA256Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomainPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDomainPolicies indicates an expected call of UpdateDomainPolicies.
func (mr *MockConnMockRecorder) UpdateDomainPolicies(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomainPolicies", reflect.TypeOf((*MockConn)(nil).UpdateDomainPolicies), arg0, arg1, arg2)
}

// UpdateDomains mocks base method.
func (m *MockConn) UpdateDomains(arg0 context.Context, arg1 []*common.SHA256Output, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDomains", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDomains indicates an expected call of UpdateDomains.
func (mr *MockConnMockRecorder) UpdateDomains(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomains", reflect.TypeOf((*MockConn)(nil).UpdateDomains), arg0, arg1, arg2)
}

// UpdateLastCTlogServerState mocks base method.
func (m *MockConn) UpdateLastCTlogServerState(arg0 context.Context, arg1 string, arg2 int64, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastCTlogServerState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastCTlogServerState indicates an expected call of UpdateLastCTlogServerState.
func (mr *MockConnMockRecorder) UpdateLastCTlogServerState(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastCTlogServerState", reflect.TypeOf((*MockConn)(nil).UpdateLastCTlogServerState), arg0, arg1, arg2, arg3)
}

// UpdatePolicies mocks base method.
func (m *MockConn) UpdatePolicies(arg0 context.Context, arg1, arg2 []*common.SHA256Output, arg3 []*time.Time, arg4 [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicies", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicies indicates an expected call of UpdatePolicies.
func (mr *MockConnMockRecorder) UpdatePolicies(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicies", reflect.TypeOf((*MockConn)(nil).UpdatePolicies), arg0, arg1, arg2, arg3, arg4)
}

// UpdateTreeNodes mocks base method.
func (m *MockConn) UpdateTreeNodes(arg0 context.Context, arg1 []*db.KeyValuePair) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTreeNodes", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTreeNodes indicates an expected call of UpdateTreeNodes.
func (mr *MockConnMockRecorder) UpdateTreeNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTreeNodes", reflect.TypeOf((*MockConn)(nil).UpdateTreeNodes), arg0, arg1)
}
