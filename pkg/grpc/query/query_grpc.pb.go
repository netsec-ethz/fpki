// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: query/query.proto

package query

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapResponderClient is the client API for MapResponder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapResponderClient interface {
	QueryMapEntries(ctx context.Context, in *MapClientRequest, opts ...grpc.CallOption) (*MapClientReply, error)
}

type mapResponderClient struct {
	cc grpc.ClientConnInterface
}

func NewMapResponderClient(cc grpc.ClientConnInterface) MapResponderClient {
	return &mapResponderClient{cc}
}

func (c *mapResponderClient) QueryMapEntries(ctx context.Context, in *MapClientRequest, opts ...grpc.CallOption) (*MapClientReply, error) {
	out := new(MapClientReply)
	err := c.cc.Invoke(ctx, "/query.MapResponder/QueryMapEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapResponderServer is the server API for MapResponder service.
// All implementations must embed UnimplementedMapResponderServer
// for forward compatibility
type MapResponderServer interface {
	QueryMapEntries(context.Context, *MapClientRequest) (*MapClientReply, error)
	mustEmbedUnimplementedMapResponderServer()
}

// UnimplementedMapResponderServer must be embedded to have forward compatible implementations.
type UnimplementedMapResponderServer struct {
}

func (UnimplementedMapResponderServer) QueryMapEntries(context.Context, *MapClientRequest) (*MapClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMapEntries not implemented")
}
func (UnimplementedMapResponderServer) mustEmbedUnimplementedMapResponderServer() {}

// UnsafeMapResponderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapResponderServer will
// result in compilation errors.
type UnsafeMapResponderServer interface {
	mustEmbedUnimplementedMapResponderServer()
}

func RegisterMapResponderServer(s grpc.ServiceRegistrar, srv MapResponderServer) {
	s.RegisterService(&MapResponder_ServiceDesc, srv)
}

func _MapResponder_QueryMapEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapResponderServer).QueryMapEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.MapResponder/QueryMapEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapResponderServer).QueryMapEntries(ctx, req.(*MapClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapResponder_ServiceDesc is the grpc.ServiceDesc for MapResponder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapResponder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.MapResponder",
	HandlerType: (*MapResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryMapEntries",
			Handler:    _MapResponder_QueryMapEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query/query.proto",
}
